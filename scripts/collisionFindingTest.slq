import collisionFinding;

// Initialize an array of elements (hardcoded)
// Current algorithm's limit - array length of 30
// arr_length := 30 : !ℕ;
// ex_array := [14, 15, 11, 3, 25, 57, 4, 6, 2, 67, 87, 5, 7, 46, 9, 20, 18, 1, 13, 56, 89, 100, 49, 34, 300, 900, 78, 43, 32, 8] coerce !ℕ^arr_length;

arr_length := 8;
ex_array := [0, 3, 37, 1, 5, 4, 2, 60] coerce !ℕ^arr_length;

// arr_length := 4;
// ex_array := [1, 3, 6, 8] coerce !ℕ^arr_length;

// Input: r-to-1 function
def op[n:!ℕ](const x : uint[n])lifted:uint[n]{
	return x % 2
	// return x % 13
	// return (x + 3) % 11
	// return (x-7) * (x-7)
}

def main(){
	runs := 100;
	score := (0,0);
	r := 4;
	opClassical := generateClassical(op[BITMAX]);
	for i in [0..runs){
		print(0,0,i,0,0);
		collision := collisionDetection(ex_array, op[BITMAX], r);
		print(collision[0], collision[1]);
		print(opClassical(collision[0]), opClassical(collision[1]));
		if opClassical(collision[0]) == opClassical(collision[1]) & (collision[0] != 0 | collision[1] != 0){ score[0] = score[0] + 1; }
		else { score[1] = score[1] + 1; }
	}
	return score;
}