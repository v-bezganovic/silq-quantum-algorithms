import decToBin, bitLength;

def uniformSuperposition (m : !ℕ, n : !ℕ) : uint[n]{
    // Initialize vector of qubits to operate on
    qubits := vector(n, 0:𝔹);

    // Generate binary representation of the given number m
    bin := decToBin(n,m);
    
    // Detect locations of 1's
    k := 0 : !ℕ;
    for i_1 in [0..n){
        if bin[i_1]{k = k + 1;}
    }

    // Detect locations of 1
    locs := vector(k, 0:!ℤ);
    cur_slot := n-1 : !ℤ;
    i_2 := 0 : !ℕ;
    while (cur_slot > 0){
        if bin[cur_slot]{
            locs[i_2] = cur_slot;
            i_2 = i_2 + 1;
        }
        cur_slot = cur_slot - 1;
    }
    
    // Apply X to qubits under loc_1...loc_k
    for i_3 in [0..k){
        qubits[locs[i_3]] = X(qubits[locs[i_3]]);
    }

    // Apply Hadamard to qubits before l_0
    if locs[k-1] > 0 {
        for i_4 in [locs[k-1]+1..n){
            qubits[i_4] := H(qubits[i_4]);
        }
    }

    // Apply rotation Y
    M_m := 2^locs[k-1];
    qubits[locs[k-2]] := rotY(-2*acos(sqrt(M_m / m)), qubits[locs[k-2]]);

    // Apply conditioned Hadamard
    q1 := dup(qubits[locs[k-2]]);
    if !q1{
        for i_5 in [locs[k-1]..locs[k-2]){
            qubits[i_5] := H(qubits[i_5]); 
        }
    }
    forget(q1 = qubits[locs[k-2]]);

    // Apply cyclic rotation and Hadamard operators
    for i_6 in [1..k-1){
        qub1 := dup(qubits[locs[i_6]]);
        if !qub1{
            qubits[locs[i_6+1]] := rotY(-2*acos(sqrt((2^locs[i_6]) / (m - M_m))), qubits[locs[i_6+1]]);
        }
        forget(qub1 = qubits[locs[i_6]]);
        qub2 := dup(qubits[locs[i_6+1]]);
        if !qub2{
            for j_1 in [locs[i_6]..locs[i_6+1]){
                qubits[j_1] := H(qubits[j_1]);
            }
        }
        forget(qub2 = qubits[locs[i_6+1]]);
        M_m = M_m + 2^locs[i_6];
    }

    return qubits as uint[n];
} 

def main(){

    // INPUT
    m := 13;
    n := bitLength(m); 

    qubits := uniformSuperposition(m, n); 
    dump();
    measure(qubits);
}