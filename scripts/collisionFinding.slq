import bitLength, random;

BITMAX := 32;

def generateSubset[arr_len : !ℕ, k : !ℕ](arr : !ℕ^arr_len) : !ℕ^k{
	if k == arr_len { return arr coerce !ℕ^k; };
	subset := vector(k, 0:!ℕ);
	len_bits := bitLength(arr_len);

	i := 0;
	while i < k {
		element_index := randomInt(len_bits) as uint[len_bits]; 
		element_index_meas := measure(element_index);
		inSubset := false : !B;
		for j in [0..k){ inSubset = inSubset || arr[element_index_meas] == subset[j]}
		if !(inSubset) { subset[i] = arr[element_index_meas]; i = i + 1; }
  	}

    return subset;
} 

def generateLists[k : !ℕ](subset : !ℕ^k, cF : !ℕ !-> !ℕ) : (!ℕ^k x !ℕ^k){
	output_list := vector(k, 0:!ℕ);
	input_list := vector(k, 0:!ℕ);

	for i in [0..k){
		output_list[i] = cF(subset[i]);
		input_list[i] = subset[i];
  	}

	return (output_list, input_list);
}

def checkDoubles[k : !ℕ](output_list : !ℕ^k, input_list : !ℕ^k) : (!ℕ x !ℕ){
	for i in [0..k){
		for j in [i+1..k){
			if output_list[j] == output_list[i] && input_list[j] != input_list[i]{
				return (input_list[i], input_list[j]);
			} 
		}
	}
	return (0, 0);
}

def generateClassical[bitmax : !ℕ](f : const uint[bitmax] !->lifted uint[bitmax]){
	return λ(x :!N) { return f(x as !uint[bitmax]) as !ℕ };
}

// Modified from Source: https://github.com/eth-sri/silq.git
def grover[n:!ℕ](f: const uint[n] !→ lifted 𝔹, marks :!ℕ):!ℕ{
	nIterations:=floor(π * sqrt((2^n) / marks)/4);
	cand:=0:uint[n];
    for k in [0..n){ cand[k]:=H(cand[k]); }
	for k in [0..nIterations){
		if f(cand){ phase(π); }
		cand:=groverDiffusion(cand);
	}
	return measure(cand) as !ℕ;
}

// Source: https://github.com/eth-sri/silq.git
def groverDiffusion[n:!ℕ](cand:uint[n])mfree: uint[n]{
	for k in [0..n) { cand[k] := H(cand[k]); }
	if cand!=0{ phase(π); }
	for k in [0..n) { cand[k] := H(cand[k]); }
	return cand;
}

// Find a collision in a function, F. If the function is not r-to-one, set r to be 0 or 1.
def collisionDetection[arr_len : !ℕ, bitmax :!ℕ](array : !ℕ^arr_len, F : const uint[bitmax] !->lifted uint[bitmax],  r : !ℕ){
	// Set cardinality of a random subset
	len_bits := bitLength(arr_len);
	// Use standard calculation of k for r-to-1 function; if r < 2, pick randomly
    if r < 2 { k := measure(randomInt(len_bits)) + 1 as !ℕ;}
	else { k := ceil((arr_len/r)^(1/3)) coerce !ℕ; }

	// Generate random subset
	subset := generateSubset[arr_len, k](array);
	
	// Generate output list
	cF := generateClassical(F);
	(output_lists, input_lists) := generateLists(subset, cF);
	print(input_lists, output_lists);										// DEBUG

	// Collision elements
	collision1 := 0 : !ℕ;
	collision2 := 0 : !ℕ;

	double := checkDoubles(output_lists, input_lists);
	if (double == (0, 0)){			// Collision not detected upon initial observation
		print(1);												// DEBUG

		// Define oracle for collision detection
    	oracleH := λ(const idx : uint[len_bits]) lifted : 𝔹 {
			if idx >= arr_len { return false : 𝔹; }
			anc := 2^bitmax - 1 as uint[bitmax];
			for i in [0..arr_len){ if idx == i { anc = array[i] coerce uint[bitmax]; }}
			anc = F(anc);
			out := false : 𝔹;
			for i in [0..k) { if idx == i {out = out | (anc == output_lists[i] & array[i] != input_lists[i] )}}
    	    return out
    	};

		if r < 2 { t := 1; }
		else{ t := (r - 1)*k coerce !ℕ; }

		// Solution detection through Grover's search 
		pending_solution_index := grover(oracleH, t) : !ℕ;

		if pending_solution_index < arr_len {
			print(pending_solution_index);
			for i in [0..k){
				if cF(array[pending_solution_index]) == output_lists[i] && array[pending_solution_index] != input_lists[i] {
					collision1 = array[pending_solution_index];
					collision2 = input_lists[i];
				} 
			}
		}
	}
	else {
		print(2);												// DEBUG
		collision1 = double[0];
		collision2 = double[1];
	}

	return (collision1, collision2);
}