import bitLength, random;

BITMAX := 32;

// Initialize an array of elements (hardcoded)
// Current algorithm's limit - array length of 30
// arr_length := 30 : !ℕ;
// ex_array := [14, 15, 11, 3, 25, 57, 4, 6, 2, 67, 87, 5, 7, 46, 9, 20, 18, 1, 13, 56, 89, 100, 49, 34, 300, 900, 78, 43, 32, 8] coerce !ℕ^arr_length;

arr_length := 8;
ex_array := [0, 3, 7, 1, 5, 4, 2, 6] coerce !ℕ^arr_length;

// arr_length := 4;
// ex_array := [1, 3, 6, 8] coerce !ℕ^arr_length;

// Input: r-to-1 function
def op[n:!ℕ](const x : uint[n])lifted:uint[n]{
	return x % 2
	// return x % 13
	// return (x + 3) % 11
	// return (x-7) * (x-7)
}

def opClassical(x :!ℕ):!ℕ{
	return op(x as !uint[BITMAX]) as !ℕ
}

def generateSubset[arr_len : !ℕ, k : !ℕ](arr : !ℕ^arr_len) : !ℕ^k{
	subset := vector(k, 0:!ℕ);
	len_bits := bitLength(arr_len);

	i := 0;
	while i < k {
		element_index := randomInt(len_bits) as uint[len_bits]; 
		element_index_meas := measure(element_index);
		inSubset := false : !B;
		for j in [0..k){ inSubset = inSubset || arr[element_index_meas] == subset[j]}
		if !(inSubset) { subset[i] = arr[element_index_meas]; i = i + 1; }
  	}

    return subset;
} 


def generateLists[k : !ℕ](subset : !ℕ^k) : (!ℕ^k x !ℕ^k){
	output_list := vector(k, 0:!ℕ);
	input_list := vector(k, 0:!ℕ);
	
	for i in [0..k){
		output_list[i] = opClassical(subset[i]);
		input_list[i] = subset[i];
  	}
	
	return (output_list, input_list);
}


def checkDoubles[k : !ℕ](output_list : !ℕ^k, input_list : !ℕ^k) : (!ℕ x !ℕ){
	grovers_item := 0 : !ℕ;
	for i in [0..k){
		for j in [i+1..k){
			if output_list[j] == output_list[i] && input_list[j] != input_list[i]{
				return (input_list[i], input_list[j]);
			} 
		}
	}
	return (0, 0);
}


// Modified from Source: https://github.com/eth-sri/silq.git
def grover[n:!ℕ, arr_len : !ℕ](f: const uint[n] !→ lifted 𝔹, marks :!ℕ):!ℕ{
	nIterations:=floor(π * sqrt(arr_len/marks)/4);
	cand:=0:uint[n];
    for k in [0..n){ cand[k]:=H(cand[k]); }
	for k in [0..nIterations){
		if f(cand){ phase(π); }
		cand:=groverDiffusion(cand);
	}
	return measure(cand) as !ℕ;
}


// Source: https://github.com/eth-sri/silq.git
def groverDiffusion[n:!ℕ](cand:uint[n])mfree: uint[n]{
	for k in [0..n) { cand[k] := H(cand[k]); }
	if cand!=0{ phase(π); }
	for k in [0..n) { cand[k] := H(cand[k]); }
	return cand;
}

def collisionDetection[arr_len : !ℕ](array : !ℕ^arr_len, r : !ℕ){
	// Set cardinality of a random subset
	len_bits := bitLength(arr_len);
	// Use standard calculation of k for r-to-1 function; if r < 2, pick randomly
    if r < 2 { k := measure(randomInt(len_bits)) as !ℕ; }
	else { k := ceil((arr_len)^(1/3)) coerce !ℕ; }

	// Generate random subset
	subset := generateSubset[arr_len, k](array);

	// Generate output list
	(output_lists, input_lists) := generateLists(subset);
	print(input_lists, output_lists);										// DEBUG

	// Collision elements
	collision1 := 0 : !ℕ;
	collision2 := 0 : !ℕ;

	if (checkDoubles(output_lists, input_lists) == (0, 0)){			// Collision not detected upon initial observation
		print(1);												// DEBUG

		// Define oracle for collision detection
    	oracleH := λ(x : uint[len_bits]) lifted : 𝔹 {
			if x < arr_len { return false : 𝔹; }
			y := op(x);
			out := false : 𝔹;
			for i in [0..k) { out = out | (y == output_lists[i] & x != input_lists[i] )}
    	    return out
    	};

		if r < 2 { t := 1; }
		else{ t := (r - 1)*k coerce !ℕ; }

		// Solution detection through Grover's search 
		pending_solution_index := grover[len_bits, arr_len](oracleH, t) : !ℕ;

		print(pending_solution_index);

		if pending_solution_index < arr_len {
			for i in [0..k){
				if opClassical(array[pending_solution_index]) == opClassical(input_lists[i]) && array[pending_solution_index] != input_lists[i] {
					collision1 = array[pending_solution_index];
					collision2 = input_lists[i];
				} 
			}
		}
	}
	else {
		double := checkDoubles(output_lists, input_lists);
		collision1 = double[0];
		collision2 = double[1];
	}

	return (collision1, collision2);
}


def main(){
	runs := 100;
	score := (0,0);
	for i in [0..runs){
		collision := collisionDetection(ex_array, 4);
		print(collision[0], collision[1]);
		print(opClassical(collision[0]), opClassical(collision[1]));
		if opClassical(collision[0]) == opClassical(collision[1]) & collision[0] != 0 & collision[1] != 0{ score[0] = score[0] + 1; }
		else { score[1] = score[1] + 1; }
	}
	return score;
}