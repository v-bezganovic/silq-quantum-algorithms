import random, bitLength;

BITMAX := 32;

// Source: https://github.com/eth-sri/silq.git
def groverDiffusion[n:!ℕ](cand:uint[n])mfree: uint[n]{
	for k in [0..n) { cand[k] := H(cand[k]); }
	if cand!=0{ phase(π); }
	for k in [0..n) { cand[k] := H(cand[k]); }
	return cand;
}

// Perform the oracle step of Grover's
def groverOracle[n: !ℕ](f: const uint[n] !→lifted 𝔹, cand : uint[n])mfree: uint[n]{
    if f(cand){ phase(π); }
    cand:=groverDiffusion(cand);
    return cand;
}

def makeAncillary[n:!N,arr_len:!N](const idx :uint[n], array :!ℕ^arr_len)qfree{
    anc := 2^BITMAX - 1 as uint[BITMAX];
    for i in [0..arr_len){ if idx == i { anc = array[i] coerce uint[BITMAX]; }}
    return anc
}

// Define oracle which outputs one only if less than minimum value
def oracle[n:!ℕ, arr_len:!ℕ](solution : !ℕ, array :!ℕ^arr_len){
    return λ(const idx : uint[n]) lifted : 𝔹 { return makeAncillary(idx, array) <= solution; }
}

def updateSolution[n:!ℕ,arr_len:!ℕ](qidx:uint[n], solution : !ℕ, array :!ℕ[]){
    temp_solution_index := measure(qidx) as !ℕ;
    if (temp_solution_index < arr_len){
        if (array[temp_solution_index] < solution){
            return array[temp_solution_index];
        }
    }
    return solution;
}

def durrhoyer[arr_len:!ℕ](array :!ℕ^arr_len){
    // Setup constants
    n := bitLength(arr_len) :!ℕ;
    oracleIterations := floor(π/(4·asin(2^(-n/2))));

    // Generate random index 0 <= y <= arr_len-1
    index := randomInt(n) as uint[n];
    index := measure(index);
    minima := array[index] : !ℕ;
    f := oracle[n,arr_len](minima,array);

    // Setup quantum register
    qidx := 0 as uint[n];
    // Iteration index and counter for Grover's loop
    t := 0 : !ℤ;
    stage := 0 : !ℤ;
    while (t <= (22.5*sqrt(arr_len) + 1.4*(n^2))){
        // Prepare superposition for all n qubits
        if stage < n {
            qidx[stage] := H(qidx[stage]);
        }
        // Perform Grover's for oracleIterations
        if n <= stage & stage < n + oracleIterations {
            qidx := groverOracle(f, qidx);
        }
        // Measure qidx and update oracle
        if stage == n + oracleIterations{
            minima = updateSolution[n,arr_len](qidx, minima, array);
            f = oracle[n,arr_len](minima, array);
            qidx := 0 :uint[n];
        }
        // Update stage and time (last stage costs no time)
        if stage < n + oracleIterations{
            t = t+1;
            stage = stage+1;
        }
        else { stage = 0; }
    }
    minima = updateSolution[n,arr_len](qidx, minima, array);
    return minima;
}

def main(){
    // Initialize an array of elements (hardcoded)
    arr_len := 30 : !ℕ;
    // ex_array := (14, 15, 8, 3, 25, 57, 4, 6, 2, 67, 87, 5, 7, 46, 9, 20, 18, 7, 5, 56, 89, 100, 49, 34, 300, 900, 78, 43, 32, 8) coerce !ℕ^arr_len;
    ex_array := (14, 15, 8, 3, 25, 57, 4, 6, 12, 67, 87, 5, 7, 46, 9, 20, 18, 7, 5, 56, 2, 100, 49, 34, 300, 900, 78, 43, 32, 60) coerce !ℕ^arr_len;

    // arr_len := 5 :!ℕ;
    // ex_array := (10, 30, 2, 25, 45) coerce !ℕ^arr_len;

    minima := 2;
    runs := 10;
    score := (0,0);
    for k in [0..runs) { 
        print(((k+1),runs));
        solution := durrhoyer(ex_array);
        print(solution);
        if solution == minima { score[0] += 1; }
        else {score[1] += 1; }
    }
    return score;
}